//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    carsAll(): Promise<CarResponseDto[]> {
        let url_ = this.baseUrl + "/api/Cars";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCarsAll(_response);
        });
    }

    protected processCarsAll(response: Response): Promise<CarResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CarResponseDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CarResponseDto[]>(null as any);
    }

    /**
     * @param ownerId (optional) 
     * @param brand (optional) 
     * @param model (optional) 
     * @param version (optional) 
     * @param color (optional) 
     * @param numberDoors (optional) 
     * @param numberSeats (optional) 
     * @param yearProduction (optional) 
     * @param course (optional) 
     * @param fuel (optional) 
     * @param consumption (optional) 
     * @param drive (optional) 
     * @param transmission (optional) 
     * @param body (optional) 
     * @param displacement (optional) 
     * @param horsePower (optional) 
     * @param condition (optional) 
     * @param vinNumber (optional) 
     * @param ownershipDocument (optional) 
     * @param carImages (optional) 
     * @return OK
     */
    carsPOST(ownerId: number | undefined, brand: string | undefined, model: string | undefined, version: string | undefined, color: string | undefined, numberDoors: number | undefined, numberSeats: number | undefined, yearProduction: number | undefined, course: number | undefined, fuel: string | undefined, consumption: number | undefined, drive: string | undefined, transmission: string | undefined, body: string | undefined, displacement: number | undefined, horsePower: number | undefined, condition: string | undefined, vinNumber: string | undefined, ownershipDocument: FileParameter | undefined, carImages: FileParameter[] | undefined): Promise<CarItem> {
        let url_ = this.baseUrl + "/api/Cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (ownerId === null || ownerId === undefined)
            throw new globalThis.Error("The parameter 'ownerId' cannot be null.");
        else
            content_.append("OwnerId", ownerId.toString());
        if (brand === null || brand === undefined)
            throw new globalThis.Error("The parameter 'brand' cannot be null.");
        else
            content_.append("Brand", brand.toString());
        if (model === null || model === undefined)
            throw new globalThis.Error("The parameter 'model' cannot be null.");
        else
            content_.append("Model", model.toString());
        if (version === null || version === undefined)
            throw new globalThis.Error("The parameter 'version' cannot be null.");
        else
            content_.append("Version", version.toString());
        if (color === null || color === undefined)
            throw new globalThis.Error("The parameter 'color' cannot be null.");
        else
            content_.append("Color", color.toString());
        if (numberDoors === null || numberDoors === undefined)
            throw new globalThis.Error("The parameter 'numberDoors' cannot be null.");
        else
            content_.append("NumberDoors", numberDoors.toString());
        if (numberSeats === null || numberSeats === undefined)
            throw new globalThis.Error("The parameter 'numberSeats' cannot be null.");
        else
            content_.append("NumberSeats", numberSeats.toString());
        if (yearProduction === null || yearProduction === undefined)
            throw new globalThis.Error("The parameter 'yearProduction' cannot be null.");
        else
            content_.append("YearProduction", yearProduction.toString());
        if (course === null || course === undefined)
            throw new globalThis.Error("The parameter 'course' cannot be null.");
        else
            content_.append("Course", course.toString());
        if (fuel === null || fuel === undefined)
            throw new globalThis.Error("The parameter 'fuel' cannot be null.");
        else
            content_.append("Fuel", fuel.toString());
        if (consumption === null || consumption === undefined)
            throw new globalThis.Error("The parameter 'consumption' cannot be null.");
        else
            content_.append("Consumption", consumption.toString());
        if (drive === null || drive === undefined)
            throw new globalThis.Error("The parameter 'drive' cannot be null.");
        else
            content_.append("Drive", drive.toString());
        if (transmission === null || transmission === undefined)
            throw new globalThis.Error("The parameter 'transmission' cannot be null.");
        else
            content_.append("Transmission", transmission.toString());
        if (body === null || body === undefined)
            throw new globalThis.Error("The parameter 'body' cannot be null.");
        else
            content_.append("Body", body.toString());
        if (displacement === null || displacement === undefined)
            throw new globalThis.Error("The parameter 'displacement' cannot be null.");
        else
            content_.append("Displacement", displacement.toString());
        if (horsePower === null || horsePower === undefined)
            throw new globalThis.Error("The parameter 'horsePower' cannot be null.");
        else
            content_.append("HorsePower", horsePower.toString());
        if (condition === null || condition === undefined)
            throw new globalThis.Error("The parameter 'condition' cannot be null.");
        else
            content_.append("Condition", condition.toString());
        if (vinNumber === null || vinNumber === undefined)
            throw new globalThis.Error("The parameter 'vinNumber' cannot be null.");
        else
            content_.append("VinNumber", vinNumber.toString());
        if (ownershipDocument === null || ownershipDocument === undefined)
            throw new globalThis.Error("The parameter 'ownershipDocument' cannot be null.");
        else
            content_.append("OwnershipDocument", ownershipDocument.data, ownershipDocument.fileName ? ownershipDocument.fileName : "OwnershipDocument");
        if (carImages === null || carImages === undefined)
            throw new globalThis.Error("The parameter 'carImages' cannot be null.");
        else
            carImages.forEach(item_ => content_.append("CarImages", item_.data, item_.fileName ? item_.fileName : "CarImages") );

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCarsPOST(_response);
        });
    }

    protected processCarsPOST(response: Response): Promise<CarItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CarItem.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CarItem>(null as any);
    }

    /**
     * @return OK
     */
    carsGET(id: number): Promise<CarItem> {
        let url_ = this.baseUrl + "/api/Cars/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCarsGET(_response);
        });
    }

    protected processCarsGET(response: Response): Promise<CarItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CarItem.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CarItem>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    carsPUT(id: number, body: UpdateCarDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCarsPUT(_response);
        });
    }

    protected processCarsPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    carsDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCarsDELETE(_response);
        });
    }

    protected processCarsDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    owner(ownerId: number): Promise<CarItem[]> {
        let url_ = this.baseUrl + "/api/Cars/owner/{ownerId}";
        if (ownerId === undefined || ownerId === null)
            throw new globalThis.Error("The parameter 'ownerId' must be defined.");
        url_ = url_.replace("{ownerId}", encodeURIComponent("" + ownerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOwner(_response);
        });
    }

    protected processOwner(response: Response): Promise<CarItem[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CarItem.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CarItem[]>(null as any);
    }

    /**
     * @param carId (optional) 
     * @param image (optional) 
     * @return OK
     */
    imagesPOST(id: number, carId: number | undefined, image: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{id}/images";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (carId === null || carId === undefined)
            throw new globalThis.Error("The parameter 'carId' cannot be null.");
        else
            content_.append("CarId", carId.toString());
        if (image === null || image === undefined)
            throw new globalThis.Error("The parameter 'image' cannot be null.");
        else
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImagesPOST(_response);
        });
    }

    protected processImagesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    imagesGET(carId: number, imageId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{carId}/images/{imageId}";
        if (carId === undefined || carId === null)
            throw new globalThis.Error("The parameter 'carId' must be defined.");
        url_ = url_.replace("{carId}", encodeURIComponent("" + carId));
        if (imageId === undefined || imageId === null)
            throw new globalThis.Error("The parameter 'imageId' must be defined.");
        url_ = url_.replace("{imageId}", encodeURIComponent("" + imageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImagesGET(_response);
        });
    }

    protected processImagesGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    imagesDELETE(carId: number, imageId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{carId}/images/{imageId}";
        if (carId === undefined || carId === null)
            throw new globalThis.Error("The parameter 'carId' must be defined.");
        url_ = url_.replace("{carId}", encodeURIComponent("" + carId));
        if (imageId === undefined || imageId === null)
            throw new globalThis.Error("The parameter 'imageId' must be defined.");
        url_ = url_.replace("{imageId}", encodeURIComponent("" + imageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImagesDELETE(_response);
        });
    }

    protected processImagesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param carId (optional) 
     * @param document (optional) 
     * @return OK
     */
    ownershipDocumentPOST(id: number, carId: number | undefined, document: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{id}/ownership-document";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (carId === null || carId === undefined)
            throw new globalThis.Error("The parameter 'carId' cannot be null.");
        else
            content_.append("CarId", carId.toString());
        if (document === null || document === undefined)
            throw new globalThis.Error("The parameter 'document' cannot be null.");
        else
            content_.append("Document", document.data, document.fileName ? document.fileName : "Document");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOwnershipDocumentPOST(_response);
        });
    }

    protected processOwnershipDocumentPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    ownershipDocumentGET(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Cars/{id}/ownership-document";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOwnershipDocumentGET(_response);
        });
    }

    protected processOwnershipDocumentGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    home(): Promise<void> {
        let url_ = this.baseUrl + "/api/Home";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHome(_response);
        });
    }

    protected processHome(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    status(): Promise<void> {
        let url_ = this.baseUrl + "/api/Home/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStatus(_response);
        });
    }

    protected processStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export enum BodyType {
    Buggy = "Buggy",
    Convertible = "Convertible",
    Coupe = "Coupe",
    Fastback = "Fastback",
    Flower_Car = "Flower Car",
    Hatchback = "Hatchback",
    Hearse = "Hearse",
    Limousine = "Limousine",
    Microcar = "Microcar",
    Minivan = "Minivan",
    Pickup_truck = "Pickup truck",
    Roadster = "Roadster",
    Sedan = "Sedan",
    Station_wagon = "Station wagon",
    SUV = "SUV",
}

export class CarImageData implements ICarImageData {
    carImageId?: number;
    carId?: number;
    imageData?: string | undefined;
    imageContentType?: string | undefined;
    uploadedAt?: Date;

    constructor(data?: ICarImageData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.carImageId = _data["carImageId"];
            this.carId = _data["carId"];
            this.imageData = _data["imageData"];
            this.imageContentType = _data["imageContentType"];
            this.uploadedAt = _data["uploadedAt"] ? new Date(_data["uploadedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): CarImageData {
        data = typeof data === 'object' ? data : {};
        let result = new CarImageData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carImageId"] = this.carImageId;
        data["carId"] = this.carId;
        data["imageData"] = this.imageData;
        data["imageContentType"] = this.imageContentType;
        data["uploadedAt"] = this.uploadedAt ? this.uploadedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface ICarImageData {
    carImageId?: number;
    carId?: number;
    imageData?: string | undefined;
    imageContentType?: string | undefined;
    uploadedAt?: Date;
}

export class CarItem implements ICarItem {
    carId?: number;
    ownerId?: number;
    brand?: string | undefined;
    model?: string | undefined;
    version?: string | undefined;
    color?: string | undefined;
    numberDoors?: number;
    numberSeats?: number;
    yearProduction?: number;
    course?: number;
    fuel?: FuelType;
    consumption?: number | undefined;
    drive?: DriveTrainLayoutType;
    transmission?: TransmissionType;
    body?: BodyType;
    displacement?: number;
    horsePower?: number;
    condition?: ConditionType;
    vinNumber?: string | undefined;
    carImages?: CarImageData[] | undefined;
    ownershipDocumentData?: string | undefined;
    ownershipDocumentContentType?: string | undefined;

    constructor(data?: ICarItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.carId = _data["carId"];
            this.ownerId = _data["ownerId"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.version = _data["version"];
            this.color = _data["color"];
            this.numberDoors = _data["numberDoors"];
            this.numberSeats = _data["numberSeats"];
            this.yearProduction = _data["yearProduction"];
            this.course = _data["course"];
            this.fuel = _data["fuel"];
            this.consumption = _data["consumption"];
            this.drive = _data["drive"];
            this.transmission = _data["transmission"];
            this.body = _data["body"];
            this.displacement = _data["displacement"];
            this.horsePower = _data["horsePower"];
            this.condition = _data["condition"];
            this.vinNumber = _data["vinNumber"];
            if (Array.isArray(_data["carImages"])) {
                this.carImages = [] as any;
                for (let item of _data["carImages"])
                    this.carImages!.push(CarImageData.fromJS(item));
            }
            this.ownershipDocumentData = _data["ownershipDocumentData"];
            this.ownershipDocumentContentType = _data["ownershipDocumentContentType"];
        }
    }

    static fromJS(data: any): CarItem {
        data = typeof data === 'object' ? data : {};
        let result = new CarItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carId"] = this.carId;
        data["ownerId"] = this.ownerId;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["version"] = this.version;
        data["color"] = this.color;
        data["numberDoors"] = this.numberDoors;
        data["numberSeats"] = this.numberSeats;
        data["yearProduction"] = this.yearProduction;
        data["course"] = this.course;
        data["fuel"] = this.fuel;
        data["consumption"] = this.consumption;
        data["drive"] = this.drive;
        data["transmission"] = this.transmission;
        data["body"] = this.body;
        data["displacement"] = this.displacement;
        data["horsePower"] = this.horsePower;
        data["condition"] = this.condition;
        data["vinNumber"] = this.vinNumber;
        if (Array.isArray(this.carImages)) {
            data["carImages"] = [];
            for (let item of this.carImages)
                data["carImages"].push(item ? item.toJSON() : undefined as any);
        }
        data["ownershipDocumentData"] = this.ownershipDocumentData;
        data["ownershipDocumentContentType"] = this.ownershipDocumentContentType;
        return data;
    }
}

export interface ICarItem {
    carId?: number;
    ownerId?: number;
    brand?: string | undefined;
    model?: string | undefined;
    version?: string | undefined;
    color?: string | undefined;
    numberDoors?: number;
    numberSeats?: number;
    yearProduction?: number;
    course?: number;
    fuel?: FuelType;
    consumption?: number | undefined;
    drive?: DriveTrainLayoutType;
    transmission?: TransmissionType;
    body?: BodyType;
    displacement?: number;
    horsePower?: number;
    condition?: ConditionType;
    vinNumber?: string | undefined;
    carImages?: CarImageData[] | undefined;
    ownershipDocumentData?: string | undefined;
    ownershipDocumentContentType?: string | undefined;
}

export class CarResponseDto implements ICarResponseDto {
    carId?: number;
    ownerId?: number;
    brand?: string | undefined;
    model?: string | undefined;
    version?: string | undefined;
    color?: string | undefined;
    numberDoors?: number;
    numberSeats?: number;
    yearProduction?: number;
    course?: number;
    fuelDisplay?: string | undefined;
    consumption?: number | undefined;
    driveDisplay?: string | undefined;
    transmissionDisplay?: string | undefined;
    bodyDisplay?: string | undefined;
    displacement?: number;
    horsePower?: number;
    conditionDisplay?: string | undefined;
    vinNumber?: string | undefined;

    constructor(data?: ICarResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.carId = _data["carId"];
            this.ownerId = _data["ownerId"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.version = _data["version"];
            this.color = _data["color"];
            this.numberDoors = _data["numberDoors"];
            this.numberSeats = _data["numberSeats"];
            this.yearProduction = _data["yearProduction"];
            this.course = _data["course"];
            this.fuelDisplay = _data["fuelDisplay"];
            this.consumption = _data["consumption"];
            this.driveDisplay = _data["driveDisplay"];
            this.transmissionDisplay = _data["transmissionDisplay"];
            this.bodyDisplay = _data["bodyDisplay"];
            this.displacement = _data["displacement"];
            this.horsePower = _data["horsePower"];
            this.conditionDisplay = _data["conditionDisplay"];
            this.vinNumber = _data["vinNumber"];
        }
    }

    static fromJS(data: any): CarResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CarResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carId"] = this.carId;
        data["ownerId"] = this.ownerId;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["version"] = this.version;
        data["color"] = this.color;
        data["numberDoors"] = this.numberDoors;
        data["numberSeats"] = this.numberSeats;
        data["yearProduction"] = this.yearProduction;
        data["course"] = this.course;
        data["fuelDisplay"] = this.fuelDisplay;
        data["consumption"] = this.consumption;
        data["driveDisplay"] = this.driveDisplay;
        data["transmissionDisplay"] = this.transmissionDisplay;
        data["bodyDisplay"] = this.bodyDisplay;
        data["displacement"] = this.displacement;
        data["horsePower"] = this.horsePower;
        data["conditionDisplay"] = this.conditionDisplay;
        data["vinNumber"] = this.vinNumber;
        return data;
    }
}

export interface ICarResponseDto {
    carId?: number;
    ownerId?: number;
    brand?: string | undefined;
    model?: string | undefined;
    version?: string | undefined;
    color?: string | undefined;
    numberDoors?: number;
    numberSeats?: number;
    yearProduction?: number;
    course?: number;
    fuelDisplay?: string | undefined;
    consumption?: number | undefined;
    driveDisplay?: string | undefined;
    transmissionDisplay?: string | undefined;
    bodyDisplay?: string | undefined;
    displacement?: number;
    horsePower?: number;
    conditionDisplay?: string | undefined;
    vinNumber?: string | undefined;
}

export enum ConditionType {
    Brand_new = "Brand new",
    Like_new = "Like new",
    Used = "Used",
    Damaged = "Damaged",
}

export enum DriveTrainLayoutType {
    FrontWheel = "Front-Wheel",
    RearWheel = "Rear-Wheel",
    AllWheel = "All-Wheel",
    FourWheel = "Four-Wheel",
}

export enum FuelType {
    Diesel = "Diesel",
    Petrol = "Petrol",
    Electric = "Electric",
    Hybrid = "Hybrid",
    Biodiesel = "Biodiesel",
    Hydrogen = "Hydrogen",
    LPG = "LPG",
    Ethanol = "Ethanol",
    Natural_Gas = "Natural Gas",
    Gasoline = "Gasoline",
    Fuel_Oil = "Fuel Oil",
    Liquid_fuels = "Liquid fuels",
    Solid_fuels = "Solid fuels",
    Kerosene = "Kerosene",
    Methanol = "Methanol",
    E10 = "E10",
}

export enum TransmissionType {
    Continuously_variable = "Continuously variable",
    Dual_Clutch_automatic = "Dual Clutch automatic",
    Automatic = "Automatic",
    Manual = "Manual",
    Automated_manual = "Automated manual",
    Torque_converter = "Torque converter",
    DirectShift_gearbox = "Direct-shift gearbox",
    SemiAutomatic = "Semi-automatic",
    Tiptronic = "Tiptronic",
}

export class UpdateCarDto implements IUpdateCarDto {
    brand?: string | undefined;
    model?: string | undefined;
    version?: string | undefined;
    color?: string | undefined;
    numberDoors?: number | undefined;
    numberSeats?: number | undefined;
    yearProduction?: number | undefined;
    course?: number | undefined;
    fuel?: string | undefined;
    consumption?: number | undefined;
    drive?: string | undefined;
    transmission?: string | undefined;
    body?: string | undefined;
    displacement?: number | undefined;
    horsePower?: number | undefined;
    condition?: string | undefined;

    constructor(data?: IUpdateCarDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.version = _data["version"];
            this.color = _data["color"];
            this.numberDoors = _data["numberDoors"];
            this.numberSeats = _data["numberSeats"];
            this.yearProduction = _data["yearProduction"];
            this.course = _data["course"];
            this.fuel = _data["fuel"];
            this.consumption = _data["consumption"];
            this.drive = _data["drive"];
            this.transmission = _data["transmission"];
            this.body = _data["body"];
            this.displacement = _data["displacement"];
            this.horsePower = _data["horsePower"];
            this.condition = _data["condition"];
        }
    }

    static fromJS(data: any): UpdateCarDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCarDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["version"] = this.version;
        data["color"] = this.color;
        data["numberDoors"] = this.numberDoors;
        data["numberSeats"] = this.numberSeats;
        data["yearProduction"] = this.yearProduction;
        data["course"] = this.course;
        data["fuel"] = this.fuel;
        data["consumption"] = this.consumption;
        data["drive"] = this.drive;
        data["transmission"] = this.transmission;
        data["body"] = this.body;
        data["displacement"] = this.displacement;
        data["horsePower"] = this.horsePower;
        data["condition"] = this.condition;
        return data;
    }
}

export interface IUpdateCarDto {
    brand?: string | undefined;
    model?: string | undefined;
    version?: string | undefined;
    color?: string | undefined;
    numberDoors?: number | undefined;
    numberSeats?: number | undefined;
    yearProduction?: number | undefined;
    course?: number | undefined;
    fuel?: string | undefined;
    consumption?: number | undefined;
    drive?: string | undefined;
    transmission?: string | undefined;
    body?: string | undefined;
    displacement?: number | undefined;
    horsePower?: number | undefined;
    condition?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}